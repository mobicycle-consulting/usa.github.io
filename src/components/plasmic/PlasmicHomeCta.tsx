
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: cB98qoa8i3odyeQmSRqxXv
    // Component: ckfsS_XTkR58
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    import LinkButton from "..//LinkButton";  // plasmic-import: ctwQTDVMmkzF/component
    
    import {useScreenVariants} from "./PlasmicGlobalVariant__Screen";  // plasmic-import: dBHaNQuMtgO0A/globalVariant
  
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_final_not_exported.css"; // plasmic-import: cB98qoa8i3odyeQmSRqxXv/projectcss
    import  "./PlasmicHomeCta.css" // plasmic-import: ckfsS_XTkR58/css
  
    import SphereIcon from "./PlasmicIcon__Sphere";  // plasmic-import: 9KW-gtI49IVaV/icon
    

    
    export type PlasmicHomeCta__VariantMembers = {
      
    };
    export type PlasmicHomeCta__VariantsArgs = {};
    type VariantPropType = keyof PlasmicHomeCta__VariantsArgs;
    export const PlasmicHomeCta__VariantProps = new Array<VariantPropType>();
  

    
    export type PlasmicHomeCta__ArgsType = {};
    type ArgPropType = keyof PlasmicHomeCta__ArgsType;
    export const PlasmicHomeCta__ArgProps = new Array<ArgPropType>();
  

    export type PlasmicHomeCta__OverridesType = {
    root?: p.Flex<"div">;
textbox?: p.Flex<"input">;
linkButton?: p.Flex<typeof LinkButton>;
svg?: p.Flex<"svg">;
  };

    
    export interface DefaultHomeCtaProps {
      
      className?: string;
    }
  

    
    function PlasmicHomeCta__RenderFunc(
      props: {
        variants: PlasmicHomeCta__VariantsArgs,
        args: PlasmicHomeCta__ArgsType
        overrides: PlasmicHomeCta__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

      return (
        
  <div
    
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_cB98qoa8i3odyeQmSRqxXv", "HomeCta__root__ic1Wx")}
    
    >
          
  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "HomeCta__box__nJmd4")}
    
    >
          
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "HomeCta__box__xyANo")}
    
    >
          { "Powering your business" }
        </div>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "HomeCta__box__bXuK4")}
    
    >
          { "Lorem ipsum dolor sit amet consectetur adipisicing elit nemo expedita voluptas culpa sapiente." }
        </div>
  

  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "HomeCta__box__vHF4")}
    
    >
          
  <input
    
    data-plasmic-name={"textbox"}
    data-plasmic-override={overrides.textbox}
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__input", "HomeCta__textbox__rAkZd")}
placeholder={("Your email..." as const)}
size={(1 as const)}
type={("text" as const)}
value={("" as const)}
    
    />
  

  <LinkButton
    
    data-plasmic-name={"linkButton"}
    data-plasmic-override={overrides.linkButton}
    
    
    
    className={classNames("__wab_instance", "HomeCta__linkButton__ehC4V")}
href={("#" as const)}
text={"Subscribe"}
type={("solidBlue" as const)}
    
    />
  
        </p.Stack>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "HomeCta__box__wM6X")}
    
    >
          { "7 days free trial. No credit card required." }
        </div>
  
        </p.Stack>
  
{ (hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "HomeCta__box___1Tyc")}
    
    >
          
  <SphereIcon
    
    data-plasmic-name={"svg"}
    data-plasmic-override={overrides.svg}
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__svg", "HomeCta__svg__zOy")}
role={"img"}
    
    />
  
        </div>
  ) : null }
        </div>
  
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root", "textbox", "linkButton", "svg"],
textbox: ["textbox"],
linkButton: ["linkButton"],
svg: ["svg"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
textbox: "input";
linkButton: typeof LinkButton;
svg: "svg"
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicHomeCta__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicHomeCta__VariantsArgs;
        args?: PlasmicHomeCta__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicHomeCta__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicHomeCta__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomeCta__ArgProps,
          internalVariantPropNames: PlasmicHomeCta__VariantProps,
        });

        return PlasmicHomeCta__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicHomeCta";
      } else {
        func.displayName = `PlasmicHomeCta.${nodeName}`;
      }
      return func;
    }

    export const PlasmicHomeCta = Object.assign(
      // Top-level PlasmicHomeCta renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        textbox: makeNodeComponent("textbox"),
linkButton: makeNodeComponent("linkButton"),
svg: makeNodeComponent("svg"),

        // Metadata about props expected for PlasmicHomeCta
        internalVariantProps: PlasmicHomeCta__VariantProps,
        internalArgProps: PlasmicHomeCta__ArgProps,
      }
    );
  

    export default PlasmicHomeCta;
    /* prettier-ignore-end */
  