
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: cB98qoa8i3odyeQmSRqxXv
    // Component: S0fuqv391T7Ns
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    import Header from "..//Header";  // plasmic-import: 4FrgMcbxttSK/component
import Section from "..//Section";  // plasmic-import: Y0Rv0W6k647T/component
import Plan from "..//Plan";  // plasmic-import: Tzd-YJ2bsFkzO/component
import Bullet from "..//Bullet";  // plasmic-import: W62hJLXSC_eY3/component
import LinkButton from "..//LinkButton";  // plasmic-import: ctwQTDVMmkzF/component
import Faq from "..//Faq";  // plasmic-import: bL96zrCYJHfc7/component
import Footer from "..//Footer";  // plasmic-import: n6U105Bf0n-C/component
    
    import {useScreenVariants} from "./PlasmicGlobalVariant__Screen";  // plasmic-import: dBHaNQuMtgO0A/globalVariant
  
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_final_not_exported.css"; // plasmic-import: cB98qoa8i3odyeQmSRqxXv/projectcss
    import  "./PlasmicPricing.css" // plasmic-import: S0fuqv391T7Ns/css
  
    
    

    
    export type PlasmicPricing__VariantMembers = {
      
    };
    export type PlasmicPricing__VariantsArgs = {};
    type VariantPropType = keyof PlasmicPricing__VariantsArgs;
    export const PlasmicPricing__VariantProps = new Array<VariantPropType>();
  

    
    export type PlasmicPricing__ArgsType = {};
    type ArgPropType = keyof PlasmicPricing__ArgsType;
    export const PlasmicPricing__ArgProps = new Array<ArgPropType>();
  

    export type PlasmicPricing__OverridesType = {
    root?: p.Flex<"div">;
header?: p.Flex<typeof Header>;
footer?: p.Flex<typeof Footer>;
  };

    
    export interface DefaultPricingProps {
      
      className?: string;
    }
  

    
    function PlasmicPricing__RenderFunc(
      props: {
        variants: PlasmicPricing__VariantsArgs,
        args: PlasmicPricing__ArgsType
        overrides: PlasmicPricing__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

      return (
        <React.Fragment>
    
    
    
      <div className={"plasmic_page_wrapper"}>
        
  <div
    
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_cB98qoa8i3odyeQmSRqxXv", "Pricing__root__rjQfv")}
    
    >
          
  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "Pricing__box__skrq")}
    
    >
          
  <Header
    
    data-plasmic-name={"header"}
    data-plasmic-override={overrides.header}
    
    
    
    className={classNames("__wab_instance", "Pricing__header__dRa7D")}
    
    />
  

  <Section
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__section__sGaa")}
subtitle={<React.Fragment>
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "Pricing__box__d9Nxx")}
    
    >
          { "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat." }
        </div>
  

  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "Pricing__box__ckCad")}
    
    >
          
  <Plan
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__plan___2MAwI")}
price={
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "Pricing__box__mpeF5")}
    
    >
          { "$10" }
        </div>
  }
    
    />
  

  <Plan
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__plan__c7QwX")}
description={
  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "Pricing__box__e1Pwe")}
    
    >
          
  <Bullet
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__bullet__zzqLd")}
    
    />
  

  <Bullet
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__bullet__mcJZc")}
    
    />
  

  <Bullet
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__bullet__zaOs")}
    
    />
  

  <Bullet
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__bullet__ohm8K")}
    
    />
  
        </p.Stack>
  }
name={"Team"}
price={
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "Pricing__box__bc01Z")}
    
    >
          { "$49" }
        </div>
  }
    
    >
          
  <LinkButton
    
    
    
    
    
    
    href={("" as const)}
text={"Get started"}
type={("solidBlue" as const)}
    
    />
  
        </Plan>
  

  <Plan
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__plan__zCemN")}
name={"Enterprise"}
price={
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "Pricing__box__baxia")}
    
    >
          { "$199" }
        </div>
  }
    
    >
          
  <LinkButton
    
    
    
    
    
    
    href={("" as const)}
text={"Contact us"}
type={("outlineBlue" as const)}
    
    />
  
        </Plan>
  
        </p.Stack>
  </React.Fragment>}
title={"Pricing"}
    
    />
  

  <Section
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__section__a2E8Y")}
subtitle={<React.Fragment>
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "Pricing__box__r2Qcp")}
    
    >
          { "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat." }
        </div>
  

  <Faq
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__faq___5BuWr")}
slot={"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."}
    
    >
          { "Are there long-term contracts?" }
        </Faq>
  

  <Faq
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__faq___20NXb")}
slot={"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."}
    
    >
          { "Can I add or remove licenses?" }
        </Faq>
  

  <Faq
    
    
    
    
    
    
    className={classNames("__wab_instance", "Pricing__faq__hyh8E")}
slot={"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."}
    
    >
          { "Do you offer refunds?" }
        </Faq>
  </React.Fragment>}
title={"FAQ"}
    
    />
  

  <Footer
    
    data-plasmic-name={"footer"}
    data-plasmic-override={overrides.footer}
    
    
    
    className={classNames("__wab_instance", "Pricing__footer__yLqEn")}
    
    />
  
        </p.Stack>
  
        </div>
  
      </div>
    
  </React.Fragment>
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root", "header", "footer"],
header: ["header"],
footer: ["footer"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
header: typeof Header;
footer: typeof Footer
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicPricing__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicPricing__VariantsArgs;
        args?: PlasmicPricing__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicPricing__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicPricing__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPricing__ArgProps,
          internalVariantPropNames: PlasmicPricing__VariantProps,
        });

        return PlasmicPricing__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicPricing";
      } else {
        func.displayName = `PlasmicPricing.${nodeName}`;
      }
      return func;
    }

    export const PlasmicPricing = Object.assign(
      // Top-level PlasmicPricing renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        header: makeNodeComponent("header"),
footer: makeNodeComponent("footer"),

        // Metadata about props expected for PlasmicPricing
        internalVariantProps: PlasmicPricing__VariantProps,
        internalArgProps: PlasmicPricing__ArgProps,
      }
    );
  

    export default PlasmicPricing;
    /* prettier-ignore-end */
  