// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cB98qoa8i3odyeQmSRqxXv
// Component: LR_RSzYbAh
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_mc_usa.module.css"; // plasmic-import: cB98qoa8i3odyeQmSRqxXv/projectcss
import * as sty from "./PlasmicPricingRowMobile.module.css"; // plasmic-import: LR_RSzYbAh/css
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: aL7LNK6o7h3/icon

export const PlasmicPricingRowMobile__VariantProps = new Array();

export const PlasmicPricingRowMobile__ArgProps = new Array("text4");

function PlasmicPricingRowMobile__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"topBorder2"}
        data-plasmic-override={overrides.topBorder2}
        className={classNames(defaultcss.all, sty.topBorder2)}
      />

      <div
        data-plasmic-name={"content2"}
        data-plasmic-override={overrides.content2}
        className={classNames(defaultcss.all, sty.content2)}
      >
        <div
          data-plasmic-name={"text3"}
          data-plasmic-override={overrides.text3}
          className={classNames(defaultcss.all, sty.text3)}
        >
          <p.PlasmicSlot
            defaultContents={"eWaste Code Finder"}
            value={args.text4}
            className={classNames(sty.slotText4)}
          />
        </div>

        <div
          data-plasmic-name={"icon"}
          data-plasmic-override={overrides.icon}
          className={classNames(defaultcss.all, sty.icon)}
        >
          <CheckIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "topBorder2", "content2", "text3", "icon", "svg"],
  topBorder2: ["topBorder2"],
  content2: ["content2", "text3", "icon", "svg"],
  text3: ["text3"],
  icon: ["icon", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPricingRowMobile__ArgProps,
      internalVariantPropNames: PlasmicPricingRowMobile__VariantProps
    });

    return PlasmicPricingRowMobile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingRowMobile";
  } else {
    func.displayName = `PlasmicPricingRowMobile.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingRowMobile = Object.assign(
  // Top-level PlasmicPricingRowMobile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topBorder2: makeNodeComponent("topBorder2"),
    content2: makeNodeComponent("content2"),
    text3: makeNodeComponent("text3"),
    icon: makeNodeComponent("icon"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicPricingRowMobile
    internalVariantProps: PlasmicPricingRowMobile__VariantProps,
    internalArgProps: PlasmicPricingRowMobile__ArgProps
  }
);

export default PlasmicPricingRowMobile;
/* prettier-ignore-end */
