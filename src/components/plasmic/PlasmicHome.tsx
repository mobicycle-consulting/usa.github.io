
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: cB98qoa8i3odyeQmSRqxXv
    // Component: Nm2hEkjzPN
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    import Header2 from "..//Header2";  // plasmic-import: VzjRiKj8lhN/component
import Features2 from "..//Features2";  // plasmic-import: vajCZel_JAG/component
import Table2 from "..//Table2";  // plasmic-import: uyExJbZ7mqv6/component
import OldFooter from "..//OldFooter";  // plasmic-import: n6U105Bf0n-C/component
    
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_final_not_exported.css"; // plasmic-import: cB98qoa8i3odyeQmSRqxXv/projectcss
    import  "./PlasmicHome.css" // plasmic-import: Nm2hEkjzPN/css
  
    
    

    
    export type PlasmicHome__VariantMembers = {
      
    };
    export type PlasmicHome__VariantsArgs = {};
    type VariantPropType = keyof PlasmicHome__VariantsArgs;
    export const PlasmicHome__VariantProps = new Array<VariantPropType>();
  

    
    export type PlasmicHome__ArgsType = {};
    type ArgPropType = keyof PlasmicHome__ArgsType;
    export const PlasmicHome__ArgProps = new Array<ArgPropType>();
  

    export type PlasmicHome__OverridesType = {
    root?: p.Flex<"div">;
box?: p.Flex<"div">;
header2?: p.Flex<typeof Header2>;
features2?: p.Flex<typeof Features2>;
table2?: p.Flex<typeof Table2>;
oldFooter?: p.Flex<typeof OldFooter>;
  };

    
    export interface DefaultHomeProps {
      
      className?: string;
    }
  

    
    function PlasmicHome__RenderFunc(
      props: {
        variants: PlasmicHome__VariantsArgs,
        args: PlasmicHome__ArgsType
        overrides: PlasmicHome__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
      return (
        
  <div
    
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_cB98qoa8i3odyeQmSRqxXv", "Home__root__vvV8P")}
    
    >
          
  <div
    
    data-plasmic-name={"box"}
    data-plasmic-override={overrides.box}
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "Home__box__ei5Wh")}
    
    >
          
  <Header2
    
    data-plasmic-name={"header2"}
    data-plasmic-override={overrides.header2}
    
    
    
    className={classNames("__wab_instance", "Home__header2__x1Lm3")}
    
    />
  

  <Features2
    
    data-plasmic-name={"features2"}
    data-plasmic-override={overrides.features2}
    
    
    
    className={classNames("__wab_instance", "Home__features2___8Qfoq")}
    
    />
  

  <Table2
    
    data-plasmic-name={"table2"}
    data-plasmic-override={overrides.table2}
    
    
    
    className={classNames("__wab_instance", "Home__table2__g8Rs0")}
    
    />
  

  <OldFooter
    
    data-plasmic-name={"oldFooter"}
    data-plasmic-override={overrides.oldFooter}
    
    
    
    className={classNames("__wab_instance", "Home__oldFooter__tx10")}
    
    />
  
        </div>
  
        </div>
  
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root", "box", "header2", "features2", "table2", "oldFooter"],
box: ["box", "header2", "features2", "table2", "oldFooter"],
header2: ["header2"],
features2: ["features2"],
table2: ["table2"],
oldFooter: ["oldFooter"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
box: "div";
header2: typeof Header2;
features2: typeof Features2;
table2: typeof Table2;
oldFooter: typeof OldFooter
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicHome__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicHome__VariantsArgs;
        args?: PlasmicHome__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicHome__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicHome__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps,
        });

        return PlasmicHome__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicHome";
      } else {
        func.displayName = `PlasmicHome.${nodeName}`;
      }
      return func;
    }

    export const PlasmicHome = Object.assign(
      // Top-level PlasmicHome renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        box: makeNodeComponent("box"),
header2: makeNodeComponent("header2"),
features2: makeNodeComponent("features2"),
table2: makeNodeComponent("table2"),
oldFooter: makeNodeComponent("oldFooter"),

        // Metadata about props expected for PlasmicHome
        internalVariantProps: PlasmicHome__VariantProps,
        internalArgProps: PlasmicHome__ArgProps,
      }
    );
  

    export default PlasmicHome;
    /* prettier-ignore-end */
  