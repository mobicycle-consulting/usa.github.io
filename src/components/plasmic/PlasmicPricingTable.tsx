
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: cB98qoa8i3odyeQmSRqxXv
    // Component: uyExJbZ7mqv6
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    
    
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_final_not_exported.css"; // plasmic-import: cB98qoa8i3odyeQmSRqxXv/projectcss
    import  "./PlasmicPricingTable.css" // plasmic-import: uyExJbZ7mqv6/css
  
    
    

    
    export type PlasmicPricingTable__VariantMembers = {
      
    };
    export type PlasmicPricingTable__VariantsArgs = {};
    type VariantPropType = keyof PlasmicPricingTable__VariantsArgs;
    export const PlasmicPricingTable__VariantProps = new Array<VariantPropType>();
  

    
    export type PlasmicPricingTable__ArgsType = {};
    type ArgPropType = keyof PlasmicPricingTable__ArgsType;
    export const PlasmicPricingTable__ArgProps = new Array<ArgPropType>();
  

    export type PlasmicPricingTable__OverridesType = {
    table?: p.Flex<"div">;
  };

    
    export interface DefaultPricingTableProps {
      
      className?: string;
    }
  

    
    function PlasmicPricingTable__RenderFunc(
      props: {
        variants: PlasmicPricingTable__VariantsArgs,
        args: PlasmicPricingTable__ArgsType
        overrides: PlasmicPricingTable__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
      return (
        
  <div
    
    data-plasmic-name={"table"}
    data-plasmic-override={overrides.table}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_cB98qoa8i3odyeQmSRqxXv", "PricingTable__table___1AXkX")}
    
    />
  
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      table: ["table"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      table: "div"
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicPricingTable__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicPricingTable__VariantsArgs;
        args?: PlasmicPricingTable__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicPricingTable__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicPricingTable__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPricingTable__ArgProps,
          internalVariantPropNames: PlasmicPricingTable__VariantProps,
        });

        return PlasmicPricingTable__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "table") {
        func.displayName = "PlasmicPricingTable";
      } else {
        func.displayName = `PlasmicPricingTable.${nodeName}`;
      }
      return func;
    }

    export const PlasmicPricingTable = Object.assign(
      // Top-level PlasmicPricingTable renders the root element
      makeNodeComponent("table"),
      {
        // Helper components rendering sub-elements
        

        // Metadata about props expected for PlasmicPricingTable
        internalVariantProps: PlasmicPricingTable__VariantProps,
        internalArgProps: PlasmicPricingTable__ArgProps,
      }
    );
  

    export default PlasmicPricingTable;
    /* prettier-ignore-end */
  