
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: cB98qoa8i3odyeQmSRqxXv
    // Component: n6U105Bf0n-C
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    import IconLink from "..//IconLink";  // plasmic-import: CtztH72n2O8v/component
    
    import {useScreenVariants} from "./PlasmicGlobalVariant__Screen";  // plasmic-import: dBHaNQuMtgO0A/globalVariant
  
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_final_not_exported.css"; // plasmic-import: cB98qoa8i3odyeQmSRqxXv/projectcss
    import  "./PlasmicOldFooter.css" // plasmic-import: n6U105Bf0n-C/css
  
    import ColorLogoTransparent2SvgIcon from "./PlasmicIcon__ColorLogoTransparent2Svg";  // plasmic-import: mY-rSgHZU/icon
import TwitterIconIcon from "./PlasmicIcon__TwitterIcon";  // plasmic-import: x5H6Yc6WgIox3/icon
import GithubIconIcon from "./PlasmicIcon__GithubIcon";  // plasmic-import: sViPfLjOBlVPw/icon
import FacebookIconIcon from "./PlasmicIcon__FacebookIcon";  // plasmic-import: QNcGHIvQ0zH7r/icon
    

    
    export type PlasmicOldFooter__VariantMembers = {
      
    };
    export type PlasmicOldFooter__VariantsArgs = {};
    type VariantPropType = keyof PlasmicOldFooter__VariantsArgs;
    export const PlasmicOldFooter__VariantProps = new Array<VariantPropType>();
  

    
    export type PlasmicOldFooter__ArgsType = {};
    type ArgPropType = keyof PlasmicOldFooter__ArgsType;
    export const PlasmicOldFooter__ArgProps = new Array<ArgPropType>();
  

    export type PlasmicOldFooter__OverridesType = {
    root?: p.Flex<"div">;
textbox?: p.Flex<"input">;
button?: p.Flex<"button">;
  };

    
    export interface DefaultOldFooterProps {
      
      className?: string;
    }
  

    
    function PlasmicOldFooter__RenderFunc(
      props: {
        variants: PlasmicOldFooter__VariantsArgs,
        args: PlasmicOldFooter__ArgsType
        overrides: PlasmicOldFooter__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

      return (
        
  <p.Stack
    as={"div"}
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_cB98qoa8i3odyeQmSRqxXv", "OldFooter__root__k9WzD")}
    
    >
          
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__upw3X")}
    
    />
  

  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__aVxaA")}
    
    >
          
  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box___7R3Kl")}
    
    >
          
  <IconLink
    
    
    
    
    
    
    className={classNames("__wab_instance", "OldFooter__iconLink__snozK")}
icon={
  <ColorLogoTransparent2SvgIcon
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__svg", "OldFooter__svg__rbmTn")}
role={"img"}
    
    />
  }
    
    />
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__cegfd")}
    
    >
          
  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__kI2B")}
href={("#" as const)}
    
    >
          { "Terms" }
        </a>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "OldFooter__box__onaY0")}
    
    >
          { " Â· " }
        </div>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link___2KXrj")}
href={("#" as const)}
    
    >
          { "Privacy" }
        </a>
  
        </div>
  
        </p.Stack>
  

  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box___94Cv")}
    
    >
          
  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__r0R3S")}
    
    >
          
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "OldFooter__box__jtToH")}
    
    >
          { "Products" }
        </div>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__wgUks")}
href={("#" as const)}
    
    >
          { "Where are WEEE?" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__zWn6E")}
href={("#" as const)}
    
    >
          { "eWaste Standards Tool" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__tBr1F")}
href={("#" as const)}
    
    >
          { "eWaste Code Finder" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__mr2Up")}
href={("#" as const)}
    
    >
          { "APIs" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__vjMcK")}
href={("#" as const)}
    
    >
          { "eAdvisor" }
        </a>
  
        </p.Stack>
  

  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__fvkez")}
    
    >
          
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "OldFooter__box__xOBaC")}
    
    >
          { "Resources" }
        </div>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__opvfz")}
href={("#" as const)}
    
    >
          { "Documentation" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__ivmPi")}
href={("#" as const)}
    
    >
          { "Tutorials & Guides" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__yCdZv")}
href={("#" as const)}
    
    >
          { "Blog" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__m2Ur3")}
href={("#" as const)}
    
    >
          { "Support Center" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__taypU")}
href={("#" as const)}
    
    >
          { "Partners" }
        </a>
  
        </p.Stack>
  

  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__deKe")}
    
    >
          
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "OldFooter__box__m4QFn")}
    
    >
          { "Company" }
        </div>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__k2FuD")}
href={("#" as const)}
    
    >
          { "Home" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__j2B7J")}
href={("#" as const)}
    
    >
          { "About us" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__vwRo9")}
href={("#" as const)}
    
    >
          { "Company values" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__oid8U")}
href={("#" as const)}
    
    >
          { "Pricing" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link___2ERl1")}
href={("#" as const)}
    
    >
          { "Privacy policy" }
        </a>
  
        </p.Stack>
  

  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__wlBsY")}
    
    >
          
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "OldFooter__box___2Zo1N")}
    
    >
          { "Subscribe" }
        </div>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "OldFooter__box___6Gttp")}
    
    >
          { "Get the latest news and articles to your inbox every month." }
        </div>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__aOgX")}
    
    >
          
  <input
    
    data-plasmic-name={"textbox"}
    data-plasmic-override={overrides.textbox}
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__input", "OldFooter__textbox__idxMk")}
placeholder={("Your email" as const)}
size={(1 as const)}
type={("text" as const)}
value={("" as const)}
    
    />
  

  <button
    
    data-plasmic-name={"button"}
    data-plasmic-override={overrides.button}
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__button", "__wab_text", "OldFooter__button__by6Zk")}
    
    >
          { ">" }
        </button>
  
        </div>
  
        </p.Stack>
  
        </p.Stack>
  
        </p.Stack>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__aj5Dh")}
    
    />
  

  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={hasVariant(globalVariants, "screen", "mobile") ? true : false}
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__zzcuX")}
    
    >
          
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box___77NvH")}
    
    >
          
  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__ck1D5")}
href={("https://cruip.com/" as const)}
    
    >
          { "MobiCycle, LLC. " }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "OldFooter__link__fcNcZ")}
href={("https://www.plasmic.app/" as const)}
    
    >
          { "Copyright 2021. " }
        </a>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "OldFooter__box__d4N9Z")}
    
    >
          { "All rights reserved." }
        </div>
  
        </div>
  

  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "OldFooter__box__v57PV")}
    
    >
          
  <IconLink
    
    
    
    
    
    
    className={classNames("__wab_instance", "OldFooter__iconLink__bReZv")}
icon={
  <TwitterIconIcon
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__svg", "OldFooter__svg__mOmg2")}
role={"img"}
    
    />
  }
    
    />
  

  <IconLink
    
    
    
    
    
    
    className={classNames("__wab_instance", "OldFooter__iconLink__tezzy")}
icon={
  <GithubIconIcon
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__svg", "OldFooter__svg__ckKel")}
role={"img"}
    
    />
  }
    
    />
  

  <IconLink
    
    
    
    
    
    
    className={classNames("__wab_instance", "OldFooter__iconLink__jnfeA")}
icon={
  <FacebookIconIcon
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__svg", "OldFooter__svg__uidWm")}
role={"img"}
    
    />
  }
    
    />
  
        </p.Stack>
  
        </p.Stack>
  
        </p.Stack>
  
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root", "textbox", "button"],
textbox: ["textbox"],
button: ["button"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
textbox: "input";
button: "button"
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicOldFooter__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicOldFooter__VariantsArgs;
        args?: PlasmicOldFooter__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicOldFooter__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicOldFooter__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOldFooter__ArgProps,
          internalVariantPropNames: PlasmicOldFooter__VariantProps,
        });

        return PlasmicOldFooter__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicOldFooter";
      } else {
        func.displayName = `PlasmicOldFooter.${nodeName}`;
      }
      return func;
    }

    export const PlasmicOldFooter = Object.assign(
      // Top-level PlasmicOldFooter renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        textbox: makeNodeComponent("textbox"),
button: makeNodeComponent("button"),

        // Metadata about props expected for PlasmicOldFooter
        internalVariantProps: PlasmicOldFooter__VariantProps,
        internalArgProps: PlasmicOldFooter__ArgProps,
      }
    );
  

    export default PlasmicOldFooter;
    /* prettier-ignore-end */
  