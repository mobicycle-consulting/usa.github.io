
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: cB98qoa8i3odyeQmSRqxXv
    // Component: BTcKC7U9f_2d
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    
    
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_final_not_exported.css"; // plasmic-import: cB98qoa8i3odyeQmSRqxXv/projectcss
    import  "./PlasmicFeatureCard.css" // plasmic-import: BTcKC7U9f_2d/css
  
    
    

    
    export type PlasmicFeatureCard__VariantMembers = {
      _long: "_long";
    };
    export type PlasmicFeatureCard__VariantsArgs = {
    _long?: SingleBooleanChoiceArg<"_long">
  };
    type VariantPropType = keyof PlasmicFeatureCard__VariantsArgs;
    export const PlasmicFeatureCard__VariantProps = new Array<VariantPropType>("_long");
  

    
    export type PlasmicFeatureCard__ArgsType = {
    iconFront?: React.ReactNode;
title?: React.ReactNode;
description?: React.ReactNode;
iconBack?: React.ReactNode
  };
    type ArgPropType = keyof PlasmicFeatureCard__ArgsType;
    export const PlasmicFeatureCard__ArgProps = new Array<ArgPropType>("iconFront","title","description","iconBack");
  

    export type PlasmicFeatureCard__OverridesType = {
    root?: p.Flex<"div">;
  };

    
    export interface DefaultFeatureCardProps {
      iconFront?: React.ReactNode;
title?: React.ReactNode;
description?: React.ReactNode;
iconBack?: React.ReactNode;
_long?: SingleBooleanChoiceArg<"_long">
      className?: string;
    }
  

    
    function PlasmicFeatureCard__RenderFunc(
      props: {
        variants: PlasmicFeatureCard__VariantsArgs,
        args: PlasmicFeatureCard__ArgsType
        overrides: PlasmicFeatureCard__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
      return (
        
  <p.Stack
    as={"div"}
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_cB98qoa8i3odyeQmSRqxXv", "FeatureCard__root__l4Dz", { "FeatureCard__root___long__l4Dz5R1Sl": hasVariant(variants, "_long", "_long") })}
    
    >
          { (hasVariant(variants, "_long", "_long") ? false : true) ? (
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "FeatureCard__box__uCo2N", { "FeatureCard__box___long__uCo2N5R1Sl": hasVariant(variants, "_long", "_long") })}
    
    >
          
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "FeatureCard__box__aiKeg", { "FeatureCard__box___long__aiKeg5R1Sl": hasVariant(variants, "_long", "_long") })}
    
    >
          <p.PlasmicSlot
      defaultContents={
  <svg
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__svg", "FeatureCard__svg__eZoi")}
role={"img"}
    
    />
  }
      value={args.iconFront}
       />
        </div>
  
        </div>
  ) : null }

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "FeatureCard__box___0L2Qa", { "FeatureCard__box___long___0L2Qa5R1Sl": hasVariant(variants, "_long", "_long") })}
    
    >
          <p.PlasmicSlot
      defaultContents={"Title"}
      value={args.title}
       />
<p.PlasmicSlot
      defaultContents={"Lorem ipsum dolor sit amet, consectetur adipiscing elit."}
      value={args.description}
      className={classNames("FeatureCard__slotDescription__dp4U6", { "FeatureCard__slotDescription___long__dp4U65R1Sl": hasVariant(variants, "_long", "_long") })} />
        </div>
  
{ (hasVariant(variants, "_long", "_long") ? true : false) ? (
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "FeatureCard__box__eLeWv", { "FeatureCard__box___long__eLeWv5R1Sl": hasVariant(variants, "_long", "_long") })}
    
    >
          <p.PlasmicSlot
      defaultContents={
  <svg
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__svg", "FeatureCard__svg__kizJj")}
role={"img"}
    
    />
  }
      value={args.iconBack}
       />
        </div>
  ) : null }
        </p.Stack>
  
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div"
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicFeatureCard__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicFeatureCard__VariantsArgs;
        args?: PlasmicFeatureCard__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicFeatureCard__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicFeatureCard__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFeatureCard__ArgProps,
          internalVariantPropNames: PlasmicFeatureCard__VariantProps,
        });

        return PlasmicFeatureCard__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicFeatureCard";
      } else {
        func.displayName = `PlasmicFeatureCard.${nodeName}`;
      }
      return func;
    }

    export const PlasmicFeatureCard = Object.assign(
      // Top-level PlasmicFeatureCard renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        

        // Metadata about props expected for PlasmicFeatureCard
        internalVariantProps: PlasmicFeatureCard__VariantProps,
        internalArgProps: PlasmicFeatureCard__ArgProps,
      }
    );
  

    export default PlasmicFeatureCard;
    /* prettier-ignore-end */
  